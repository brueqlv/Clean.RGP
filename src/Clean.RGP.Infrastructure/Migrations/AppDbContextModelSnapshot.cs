// <auto-generated />
using System;
using Clean.RGP.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Clean.RGP.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.0");

            modelBuilder.Entity("Clean.RGP.Core.ContributorAggregate.Contributor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Contributors");
                });

            modelBuilder.Entity("Clean.RGP.Core.PersonAggregate.LandProperty", b =>
                {
                    b.Property<int>("LandPropertyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<long>("CadastralMark")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("PersonId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.HasKey("LandPropertyId");

                    b.HasIndex("PersonId");

                    b.ToTable("LandProperties");
                });

            modelBuilder.Entity("Clean.RGP.Core.PersonAggregate.LandType", b =>
                {
                    b.Property<int>("LandTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("AreaInHectares")
                        .HasColumnType("TEXT");

                    b.Property<int>("PlotId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.HasKey("LandTypeId");

                    b.HasIndex("PlotId");

                    b.ToTable("LandTypes");
                });

            modelBuilder.Entity("Clean.RGP.Core.PersonAggregate.Person", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("PersonId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PersonType")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PersonalCodeOrRegistrationNumber")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("People");
                });

            modelBuilder.Entity("Clean.RGP.Core.PersonAggregate.Plot", b =>
                {
                    b.Property<int>("PlotId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<long>("CadastralMark")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DateOfSurvey")
                        .HasColumnType("TEXT");

                    b.Property<int>("LandPropertyId")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("TotalAreaInHectares")
                        .HasColumnType("TEXT");

                    b.HasKey("PlotId");

                    b.HasIndex("LandPropertyId");

                    b.ToTable("Plots");
                });

            modelBuilder.Entity("Clean.RGP.Core.PersonAggregate.LandProperty", b =>
                {
                    b.HasOne("Clean.RGP.Core.PersonAggregate.Person", "Person")
                        .WithMany("LandProperties")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");
                });

            modelBuilder.Entity("Clean.RGP.Core.PersonAggregate.LandType", b =>
                {
                    b.HasOne("Clean.RGP.Core.PersonAggregate.Plot", "Plot")
                        .WithMany("LandTypes")
                        .HasForeignKey("PlotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Plot");
                });

            modelBuilder.Entity("Clean.RGP.Core.PersonAggregate.Plot", b =>
                {
                    b.HasOne("Clean.RGP.Core.PersonAggregate.LandProperty", "LandProperty")
                        .WithMany("Plots")
                        .HasForeignKey("LandPropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LandProperty");
                });

            modelBuilder.Entity("Clean.RGP.Core.PersonAggregate.LandProperty", b =>
                {
                    b.Navigation("Plots");
                });

            modelBuilder.Entity("Clean.RGP.Core.PersonAggregate.Person", b =>
                {
                    b.Navigation("LandProperties");
                });

            modelBuilder.Entity("Clean.RGP.Core.PersonAggregate.Plot", b =>
                {
                    b.Navigation("LandTypes");
                });
#pragma warning restore 612, 618
        }
    }
}
